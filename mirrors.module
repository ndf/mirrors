<?php

/**
 * @file
 * Creates an Export View and an Import Feed for your entities
 */

/**
 * Per entity-bundle a feed importer and a views-exporter will be created.
 *
 * Logic:
 * 1. Function that returns fields and properties for supported bundles.
 * 2. Function that creates feed-configurations.
 * 3. Function that creates view-configurations.
 */

/**
 * Default separator is used in multivalue list-fields.
 */
define('MIRRORS_DEFAULT_SEPARATOR', '/');

/**
 * Implements hook_permission().
 */
function mirrors_permission() {
  return array(
    'administer mirrors' => array(
      'title' => t('Administer mirrors'),
      'description' => t('Use mirrors export-views.'),
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function mirrors_views_api() {
  return array('api' => 3);
}

/**
 * Implements hook_ctools_plugin_api().
 */
function mirrors_ctools_plugin_api() {
  list($module, $api) = func_get_args();
  if ($module == 'feeds' && $api == 'feeds_importer_default') {
    return array('version' => 1);
  }
  if ($module == "feeds_tamper" && $api == "feeds_tamper_default") {
    return array("version" => "2");
  }
}

/**
 * Returns bundle configuration for supported entity and field types.
 *
 * These configurations are used by mirrors_views and mirrors_feeds
 * to create exporters and importers.
 */
function mirrors_bundles() {
  module_load_include('inc', 'mirrors', 'mirrors.defaults');

  $mirrors_bundles = _mirrors_supported_bundles();
  _mirrors_add_property_settings($mirrors_bundles);
  _mirrors_add_fields($mirrors_bundles);

  return $mirrors_bundles;
}

/**
 * Implements hook_views_default_views().
 */
function mirrors_views_default_views() {
  module_load_include('inc', 'mirrors', 'mirrors.views');

  $export = array();
  $bundles = mirrors_bundles();

  foreach ($bundles as $entity_type => $bundle) {
    foreach ($bundle as $entity_id => $mirrors_entity) {

      $name = "mirrors_" . $entity_type . "__" . $entity_id;
      $try = mirrors_views_create($name, $entity_type, $entity_id, $mirrors_entity);
      if ($try !== FALSE) {
        $export[$name] = $try;
      }
    }
  }

  return $export;
}

/**
 * Implements hook_feeds_importer_default().
 */
function mirrors_feeds_importer_default() {
  module_load_include('inc', 'mirrors', 'mirrors.feeds');

  $export = array();
  $bundles = mirrors_bundles();

  foreach ($bundles as $entity_type => $bundle) {
    foreach ($bundle as $entity_id => $mirrors_entity) {

      $name = "mirrors_" . $entity_type . "__" . $entity_id;
      $try = mirrors_feeds_create($name, $entity_type, $entity_id, $mirrors_entity);

      if ($try !== FALSE) {
        $export[$name] = $try;
      }
    }
  }

  return $export;
}

/**
 * Implements hook_feeds_tamper_default().
 *
 * Feeds Tamper is acting only on multivalue-fields (lists). We find these
 * and create appropriate tampers for them.
 */
function mirrors_feeds_tamper_default() {
  module_load_include('inc', 'mirrors', 'mirrors.feeds_tamper');

  $export = array();
  $bundles = mirrors_bundles();

  foreach ($bundles as $entity_type => $bundle) {
    foreach ($bundle as $entity_id => $mirrors_entity) {

      // Now through the fields and act when its a list field.
      foreach ($mirrors_entity['fields'] as $key => $field) {
        if (array_key_exists('list', $field) && $field['list'] == TRUE) {
          $name = "mirrors_" . $entity_type . "__" . $entity_id;
          $field_id = $key;

          $try = mirrors_feeds_tamper_create($name, $field_id);

          if ($try !== FALSE) {
            $export[$name . '-' . $field_id . '-explode'] = $try;
          }
        }
      }

    }
  }

  return $export;
}


/**
 * Returns supported entity_types, hookable.
 */
function mirrors_entity_types() {

  $mirrors_entity_types = mirrors_entity_types_defaults();
  drupal_alter('mirrors_entity_types', $mirrors_entity_types);

  return $mirrors_entity_types;
}

/**
 * Returns supported field_types, hookable.
 */
function mirrors_field_types() {

  $mirrors_field_types = mirrors_field_types_defaults();
  drupal_alter('mirrors_field_types', $mirrors_field_types);

  return $mirrors_field_types;
}

/**
 * Returns supported property_types, hookable.
 */
function mirrors_property_types() {

  $mirrors_property_types = mirrors_property_types_defaults();
  drupal_alter('mirrors_property_types', $mirrors_property_types);

  return $mirrors_property_types;
}

/**
 * Returns a condensed array with active bundles per entity_type.
 */
function _mirrors_supported_bundles() {
  $mirrors_bundles = array();

  // $bundles contains all bundles in the drupal instance.
  $bundles = field_info_bundles();
  // $mirrors_entity_types contains only supported entity types.
  $mirrors_entity_types = mirrors_entity_types();

  // Loop through all entity types (node, user, etc.).
  foreach ($bundles as $entity_type => $bundle) {
    // If supported entity type, loop through all bundles (article, page, etc.).
    if (array_key_exists($entity_type, $mirrors_entity_types)) {
      foreach ($bundle as $entity_id => $entity) {
        $mirrors_bundles[$entity_type][$entity_id] = $mirrors_entity_types[$entity_type];
      }
    }
    else {
      // Unsupported entity_type.
    }
  }

  return $mirrors_bundles;
}

/**
 * Add properties settings.
 */
function _mirrors_add_property_settings(&$mirrors_bundles) {
  $mirrors_property_types = mirrors_property_types();

  // Loop through all entity types (node, user, etc.).
  foreach ($mirrors_bundles as &$bundle) {
    // Loop through all bundles (article, page, etc.).
    foreach ($bundle as &$entity) {
      // Loop through all properties (nid, status, etc.).
      foreach ($entity['properties'] as &$property) {
        // If supported property type, add to mirrors condensed array.
        if (array_key_exists($property['type'], $mirrors_property_types)) {
          $property = array_merge_recursive(
            $property,
            $mirrors_property_types[$property['type']]
          );
        }
      }
    }
  }
}

/**
 * Add fields to bundles.
 */
function _mirrors_add_fields(&$mirrors_bundles) {
  $mirrors_field_types = mirrors_field_types();

  $entities = entity_get_property_info();

  // Loop through all entity types (node, user, etc.).
  foreach ($mirrors_bundles as $entity_type => &$bundle) {
    // Loop through all bundles (article, page, etc.).
    foreach ($bundle as $entity_id => &$entity) {

      $mirrors_fields = array();
      // Loop through all fields.
      if (isset($entities[$entity_type]['bundles'][$entity_id]['properties'])) {
        $fields = $entities[$entity_type]['bundles'][$entity_id]['properties'];

        foreach ($fields as $key => $field) {
          $field_type = mirrors_field_type_filter_list($field['type']);

          // If we deal with a list, we put that in the condensed array so
          // importers and exporters can act on it.
          if ($field['type'] !== $field_type) {
            $mirrors_field_types[$field_type]['list'] = TRUE;
          }

          // If supported field type, add to mirrors condensed array.
          if (array_key_exists($field_type, $mirrors_field_types)) {
            $field = $mirrors_field_types[$field_type];
            $field['type'] = $field_type;
            $mirrors_fields[$key] = $field;
          }
          else {
            // Unsupported field type.
          }
        }
      }
      $entity['fields'] = $mirrors_fields;
    }
  }
}

/**
 * Helper function for lists.
 */
function mirrors_field_type_filter_list($field_type) {
  // Check if we are dealing with a list.
  if (substr($field_type, 0, 4) == 'list') {

    // Extract field_type "list<$field_type>".
    $length = strlen($field_type);
    $field_type = substr($field_type, 5, $length - 6);
  }
  return $field_type;
}

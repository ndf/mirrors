<?php

/**
 * @file
 * Creates an Export View and an Import Feed for your entities
 */

/**
 * Per entity-bundle a feed importer and a views-exporter will be created.
 *
 * Logic:
 * 1. Function that returns fields and properties for supported bundles.
 * 2. Function that creates feed-configurations.
 * 3. Function that creates view-configurations.
 *
 */


module_load_include('inc', 'mirrors', 'mirrors.defaults');
module_load_include('inc', 'mirrors', 'mirrors.feeds');
module_load_include('inc', 'mirrors', 'mirrors.views');

/**
 * Implements hook_permission().
 */
function mirrors_permission() {
  return array(
    'Administer mirrors' => array(
      'title' => t('Administer mirrors'),
      'description' => t('Use mirrors export-views.'),
    ),
  );
}

/**
 * Returns bundle configuration for supported entity and field types
 * These configurations are used by mirrors_views and mirrors_feeds
 * to create exporters and importers
 */
function mirrors_bundles() {
  $bundles = _mirrors_supported_bundles();
  $bundles = _mirrors_add_property_settings($bundles);
  $bundles = _mirrors_add_fields($bundles);

  return $bundles;
}


/**
 * Returns supported entity_types, hookable.
 */
function mirrors_entity_types() {

  $entity_types = mirrors_entity_types_defaults();
  drupal_alter('entity_types', $entity_types);

  return $entity_types;
}

/**
 * Returns supported field_types, hookable.
 */
function mirrors_field_types() {

  $field_types = mirrors_field_types_defaults();
  drupal_alter('field_types', $field_types);

  return $field_types;
}

/**
 * Returns supported field_types, hookable.
 */
function mirrors_property_types() {

  $property_types = mirrors_property_types_defaults();
  drupal_alter('property_types', $property_types);

  return $property_types;
}

/**
 * Returns a condensed array with active bundles per entity_type.
 */
function _mirrors_supported_bundles() {
  $mirrors_bundles = array();

  // $bundles contains all bundles in the drupal instance
  $bundles = field_info_bundles();
  // $mirrors_entity_types contains only supported entity types
  $mirrors_entity_types = mirrors_entity_types();

  // Loop through all entity types (node, user, etc.)
  foreach ($bundles as $entity_type => $bundle) {
    // If entity type is supported, loop through all bundles (article, page, etc.)
    if (array_key_exists($entity_type, $mirrors_entity_types)) {
      foreach ($bundle as $entity_id => $entity) {
        $mirrors_bundles[$entity_type][$entity_id] = $mirrors_entity_types[$entity_type];
      }
    }
    else {
      // Unsupported entity_type
    }
  }

  return $mirrors_bundles;
}

/**
 * Add properties settings.
 */
function _mirrors_add_property_settings($bundles) {
  $mirrors_property_types = mirrors_property_types();

  // Loop through all entity types (node, user, etc.)
  foreach ($bundles as $entity_type => &$bundle) {
    // Loop through all bundles (article, page, etc.)
    foreach ($bundle as $entity_id => &$entity) {
      // Loop through all properties (nid, status, etc.)
      foreach ($entity['properties'] as &$property) {
        // If supported property type, add to mirrors condensed array.
        if (array_key_exists($property['type'], $mirrors_property_types)) {
          $property =  array_merge_recursive(
            $property,
            $mirrors_property_types[$property['type']]
          );
        }
      }
    }
  }

  return $bundles;
}

/**
 * Add fields to bundles.
 */
function _mirrors_add_fields($bundles) {
  $mirrors_field_types = mirrors_field_types();

  $entities = entity_get_property_info();

  // Loop through all entity types (node, user, etc.)
  foreach ($bundles as $entity_type => &$bundle) {
    // Loop through all bundles (article, page, etc.)
    foreach ($bundle as $entity_id => &$entity) {

      $mirrors_fields = array();
      // Loop through all fields
      if (isset( $entities[$entity_type]['bundles'][$entity_id]['properties'] )) {
        $fields = $entities[$entity_type]['bundles'][$entity_id]['properties'];

        foreach ($fields as $key => $field) {
          $field_type = mirrors_field_type_filter_list($field['type']);

          // If supported field type, add to mirrors condensed array.
          if (array_key_exists($field_type, $mirrors_field_types)) {
            $field = $mirrors_field_types[$field_type];
            $field['type'] = $field_type;
            $mirrors_fields[$key] = $field;
          }
          else {
            // Unsupported field type
          }
        }
      }
      $entity['fields'] = $mirrors_fields;
    }
  }

  return $bundles;
}

/**
 * Helper function for lists.
 */
function mirrors_field_type_filter_list($field_type) {
  // Check if we are dealing with a list
  if (substr($field_type, 0, 4) == 'list') {
    $mapper['separator'] = '/';

    // Extract field_type "list<$field_type>"
    $length = strlen($field_type);
    $field_type = substr($field_type, 5, $length - 6);
  }
  return $field_type;
}
